{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","client/tests/adapters/application.jshint.lint-test.js","client/tests/adapters/restadapter.jshint.lint-test.js","client/tests/adapters/session.jshint.lint-test.js","client/tests/adapters/user.jshint.lint-test.js","client/tests/app.jshint.lint-test.js","client/tests/components/app-view.jshint.lint-test.js","client/tests/components/page-view.jshint.lint-test.js","client/tests/helpers/and-b.jshint.lint-test.js","client/tests/helpers/date-format.jshint.lint-test.js","client/tests/helpers/destroy-app.js","client/tests/helpers/destroy-app.jshint.lint-test.js","client/tests/helpers/ember-i18n/test-helpers.js","client/tests/helpers/eq-o.jshint.lint-test.js","client/tests/helpers/find-reservation.jshint.lint-test.js","client/tests/helpers/gt-num.jshint.lint-test.js","client/tests/helpers/is-today.jshint.lint-test.js","client/tests/helpers/module-for-acceptance.js","client/tests/helpers/module-for-acceptance.jshint.lint-test.js","client/tests/helpers/not-b.jshint.lint-test.js","client/tests/helpers/or-b.jshint.lint-test.js","client/tests/helpers/resolver.js","client/tests/helpers/resolver.jshint.lint-test.js","client/tests/helpers/start-app.js","client/tests/helpers/start-app.jshint.lint-test.js","client/tests/helpers/starts-with.jshint.lint-test.js","client/tests/helpers/str-concat.jshint.lint-test.js","client/tests/helpers/to-ascii.jshint.lint-test.js","client/tests/initializers/loader.jshint.lint-test.js","client/tests/initializers/session.jshint.lint-test.js","client/tests/initializers/uncountable.jshint.lint-test.js","client/tests/instance-initializers/language.jshint.lint-test.js","client/tests/instance-initializers/session.jshint.lint-test.js","client/tests/integration/pods/components/date-picker/component-test.js","client/tests/integration/pods/components/date-picker/component-test.jshint.lint-test.js","client/tests/integration/pods/components/header-profile-box/component-test.js","client/tests/integration/pods/components/header-profile-box/component-test.jshint.lint-test.js","client/tests/integration/pods/components/placc-calendar/component-test.js","client/tests/integration/pods/components/placc-calendar/component-test.jshint.lint-test.js","client/tests/integration/pods/components/profile-card/component-test.js","client/tests/integration/pods/components/profile-card/component-test.jshint.lint-test.js","client/tests/locales/en/translations.jshint.lint-test.js","client/tests/models/building.jshint.lint-test.js","client/tests/models/company.jshint.lint-test.js","client/tests/models/langtext.jshint.lint-test.js","client/tests/models/level.jshint.lint-test.js","client/tests/models/reservation.jshint.lint-test.js","client/tests/models/seat.jshint.lint-test.js","client/tests/models/session.jshint.lint-test.js","client/tests/models/user.jshint.lint-test.js","client/tests/models/useracc.jshint.lint-test.js","client/tests/pods/activate/controller.jshint.lint-test.js","client/tests/pods/activate/route.jshint.lint-test.js","client/tests/pods/admin/language/controller.jshint.lint-test.js","client/tests/pods/application/controller.jshint.lint-test.js","client/tests/pods/application/route.jshint.lint-test.js","client/tests/pods/building/route.jshint.lint-test.js","client/tests/pods/company/route.jshint.lint-test.js","client/tests/pods/components/company-card/component.jshint.lint-test.js","client/tests/pods/components/company-list/component.jshint.lint-test.js","client/tests/pods/components/date-picker/component.jshint.lint-test.js","client/tests/pods/components/header-profile-box/component.jshint.lint-test.js","client/tests/pods/components/help-box/component.jshint.lint-test.js","client/tests/pods/components/info-modal/component.jshint.lint-test.js","client/tests/pods/components/placc-calendar/component.jshint.lint-test.js","client/tests/pods/components/profile-card/component.jshint.lint-test.js","client/tests/pods/components/q-input/component.jshint.lint-test.js","client/tests/pods/components/q-signup/component.jshint.lint-test.js","client/tests/pods/components/wysiwyg-editor/component.jshint.lint-test.js","client/tests/pods/cpolicy/route.jshint.lint-test.js","client/tests/pods/error-page/route.jshint.lint-test.js","client/tests/pods/index/controller.jshint.lint-test.js","client/tests/pods/index/route.jshint.lint-test.js","client/tests/pods/level/controller.jshint.lint-test.js","client/tests/pods/level/route.jshint.lint-test.js","client/tests/pods/privacy/route.jshint.lint-test.js","client/tests/pods/profile/controller.jshint.lint-test.js","client/tests/pods/profile/forgotpwchange/controller.jshint.lint-test.js","client/tests/pods/profile/forgotpwchange/route.jshint.lint-test.js","client/tests/pods/profile/forgotpwd/controller.jshint.lint-test.js","client/tests/pods/profile/forgotpwd/route.jshint.lint-test.js","client/tests/pods/profile/index/controller.jshint.lint-test.js","client/tests/pods/profile/index/route.jshint.lint-test.js","client/tests/pods/profile/modify/controller.jshint.lint-test.js","client/tests/pods/profile/modify/route.jshint.lint-test.js","client/tests/pods/profile/places/controller.jshint.lint-test.js","client/tests/pods/profile/places/route.jshint.lint-test.js","client/tests/pods/profile/route.jshint.lint-test.js","client/tests/pods/profile/signup/controller.jshint.lint-test.js","client/tests/pods/profile/signup/route.jshint.lint-test.js","client/tests/pods/terms/route.jshint.lint-test.js","client/tests/resolver.jshint.lint-test.js","client/tests/router.jshint.lint-test.js","client/tests/serializers/application.jshint.lint-test.js","client/tests/serializers/session.jshint.lint-test.js","client/tests/services/appstate.jshint.lint-test.js","client/tests/services/loader.jshint.lint-test.js","client/tests/services/modal.jshint.lint-test.js","client/tests/services/session.jshint.lint-test.js","client/tests/test-helper.js","client/tests/test-helper.jshint.lint-test.js","client/tests/transforms/datetime.jshint.lint-test.js","client/tests/transforms/mdate.jshint.lint-test.js","client/tests/transforms/raw.jshint.lint-test.js","client/tests/transforms/time.jshint.lint-test.js","client/tests/transforms/timestamp.jshint.lint-test.js","client/tests/unit/building/route-test.js","client/tests/unit/building/route-test.jshint.lint-test.js","client/tests/unit/helpers/date-format-test.js","client/tests/unit/helpers/date-format-test.jshint.lint-test.js","client/tests/unit/helpers/is-today-test.js","client/tests/unit/helpers/is-today-test.jshint.lint-test.js","client/tests/unit/initializers/loader-test.js","client/tests/unit/initializers/loader-test.jshint.lint-test.js","client/tests/unit/initializers/session-test.js","client/tests/unit/initializers/session-test.jshint.lint-test.js","client/tests/unit/initializers/uncountable-test.js","client/tests/unit/initializers/uncountable-test.jshint.lint-test.js","client/tests/unit/instance-initializers/session-test.js","client/tests/unit/instance-initializers/session-test.jshint.lint-test.js","client/tests/unit/models/building-test.js","client/tests/unit/models/building-test.jshint.lint-test.js","client/tests/unit/models/level-test.js","client/tests/unit/models/level-test.jshint.lint-test.js","client/tests/unit/models/reservation-test.js","client/tests/unit/models/reservation-test.jshint.lint-test.js","client/tests/unit/models/seat-test.js","client/tests/unit/models/seat-test.jshint.lint-test.js","client/tests/unit/models/user-test.js","client/tests/unit/models/user-test.jshint.lint-test.js","client/tests/unit/pods/building/route-test.js","client/tests/unit/pods/building/route-test.jshint.lint-test.js","client/tests/unit/pods/company/route-test.js","client/tests/unit/pods/company/route-test.jshint.lint-test.js","client/tests/unit/pods/cpolicy/route-test.js","client/tests/unit/pods/cpolicy/route-test.jshint.lint-test.js","client/tests/unit/pods/error-page/route-test.js","client/tests/unit/pods/error-page/route-test.jshint.lint-test.js","client/tests/unit/pods/level/route-test.js","client/tests/unit/pods/level/route-test.jshint.lint-test.js","client/tests/unit/pods/levels/route-test.js","client/tests/unit/pods/levels/route-test.jshint.lint-test.js","client/tests/unit/pods/privacy/route-test.js","client/tests/unit/pods/privacy/route-test.jshint.lint-test.js","client/tests/unit/pods/terms/route-test.js","client/tests/unit/pods/terms/route-test.jshint.lint-test.js","client/tests/unit/services/appstate-test.js","client/tests/unit/services/appstate-test.jshint.lint-test.js","client/tests/unit/transforms/datetime-test.js","client/tests/unit/transforms/datetime-test.jshint.lint-test.js","client/tests/unit/transforms/mdate-test.js","client/tests/unit/transforms/mdate-test.jshint.lint-test.js","client/tests/unit/transforms/raw-test.js","client/tests/unit/transforms/raw-test.jshint.lint-test.js","client/tests/unit/transforms/time-test.js","client/tests/unit/transforms/time-test.jshint.lint-test.js","client/tests/unit/transforms/timestamp-test.js","client/tests/unit/transforms/timestamp-test.jshint.lint-test.js","client/tests/unit/validators/no-whitespace-around-test.js","client/tests/unit/validators/no-whitespace-around-test.jshint.lint-test.js","client/tests/unit/validators/unique-email-test.js","client/tests/unit/validators/unique-email-test.jshint.lint-test.js","client/tests/utils/auth-route.jshint.lint-test.js","client/tests/utils/i18n/missing-message.jshint.lint-test.js","client/tests/utils/q-infinity-route.jshint.lint-test.js","client/tests/validators/no-whitespace-around.jshint.lint-test.js","client/tests/validators/unique-email.jshint.lint-test.js","client/tests/validators/unique-login.jshint.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('client/tests/adapters/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('client/tests/adapters/restadapter.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/restadapter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/restadapter.js should pass jshint.');\n  });\n});","define('client/tests/adapters/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/session.js should pass jshint.');\n  });\n});","define('client/tests/adapters/user.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass jshint.');\n  });\n});","define('client/tests/app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('client/tests/components/app-view.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/app-view.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/app-view.js should pass jshint.');\n  });\n});","define('client/tests/components/page-view.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/page-view.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/page-view.js should pass jshint.');\n  });\n});","define('client/tests/helpers/and-b.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/and-b.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/and-b.js should pass jshint.');\n  });\n});","define('client/tests/helpers/date-format.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/date-format.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/date-format.js should pass jshint.');\n  });\n});","define('client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n    server.shutdown();\n  }\n});","define('client/tests/helpers/destroy-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('client/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof QUnit.assert.ok === 'function') {\n      return function (element, key, text) {\n        QUnit.assert.ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('client/tests/helpers/eq-o.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/eq-o.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/eq-o.js should pass jshint.');\n  });\n});","define('client/tests/helpers/find-reservation.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/find-reservation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/find-reservation.js should pass jshint.');\n  });\n});","define('client/tests/helpers/gt-num.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/gt-num.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/gt-num.js should pass jshint.');\n  });\n});","define('client/tests/helpers/is-today.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/is-today.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/is-today.js should pass jshint.');\n  });\n});","define('client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'client/tests/helpers/start-app', 'client/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _clientTestsHelpersStartApp, _clientTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _clientTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _clientTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('client/tests/helpers/module-for-acceptance.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('client/tests/helpers/not-b.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/not-b.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/not-b.js should pass jshint.');\n  });\n});","define('client/tests/helpers/or-b.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/or-b.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/or-b.js should pass jshint.');\n  });\n});","define('client/tests/helpers/resolver', ['exports', 'client/resolver', 'client/config/environment'], function (exports, _clientResolver, _clientConfigEnvironment) {\n\n  var resolver = _clientResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _clientConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _clientConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('client/tests/helpers/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('client/tests/helpers/start-app', ['exports', 'ember', 'client/app', 'client/config/environment'], function (exports, _ember, _clientApp, _clientConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _clientConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _clientApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('client/tests/helpers/start-app.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('client/tests/helpers/starts-with.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/starts-with.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/starts-with.js should pass jshint.');\n  });\n});","define('client/tests/helpers/str-concat.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/str-concat.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/str-concat.js should pass jshint.');\n  });\n});","define('client/tests/helpers/to-ascii.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/to-ascii.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-ascii.js should pass jshint.');\n  });\n});","define('client/tests/initializers/loader.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/loader.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/loader.js should pass jshint.');\n  });\n});","define('client/tests/initializers/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/session.js should pass jshint.');\n  });\n});","define('client/tests/initializers/uncountable.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/uncountable.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/uncountable.js should pass jshint.');\n  });\n});","define('client/tests/instance-initializers/language.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/language.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/language.js should pass jshint.');\n  });\n});","define('client/tests/instance-initializers/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | instance-initializers/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'instance-initializers/session.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/date-picker/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('date-picker', 'Integration | Component | date picker', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'azFm8ca1',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"date-picker\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'nvlQNPy1',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"date-picker\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('client/tests/integration/pods/components/date-picker/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/date-picker/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/date-picker/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/header-profile-box/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('header-profile-box', 'Integration | Component | header profile box', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'CJ1tvKAj',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"header-profile-box\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '1HmX0IVN',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"header-profile-box\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('client/tests/integration/pods/components/header-profile-box/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/header-profile-box/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/header-profile-box/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/placc-calendar/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('placc-calendar', 'Integration | Component | placc calendar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'bVRvLi9J',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"placc-calendar\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'tqiOXvUF',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"placc-calendar\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('client/tests/integration/pods/components/placc-calendar/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/placc-calendar/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/placc-calendar/component-test.js should pass jshint.');\n  });\n});","define('client/tests/integration/pods/components/profile-card/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('profile-card', 'Integration | Component | profile card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'sTnBTKse',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"profile-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'Tdcmx6Zl',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"profile-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('client/tests/integration/pods/components/profile-card/component-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/pods/components/profile-card/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/profile-card/component-test.js should pass jshint.');\n  });\n});","define('client/tests/locales/en/translations.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('client/tests/models/building.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/building.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/building.js should pass jshint.');\n  });\n});","define('client/tests/models/company.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/company.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/company.js should pass jshint.');\n  });\n});","define('client/tests/models/langtext.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/langtext.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/langtext.js should pass jshint.');\n  });\n});","define('client/tests/models/level.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/level.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/level.js should pass jshint.');\n  });\n});","define('client/tests/models/reservation.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/reservation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/reservation.js should pass jshint.');\n  });\n});","define('client/tests/models/seat.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/seat.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/seat.js should pass jshint.');\n  });\n});","define('client/tests/models/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/session.js should pass jshint.');\n  });\n});","define('client/tests/models/user.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass jshint.');\n  });\n});","define('client/tests/models/useracc.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/useracc.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/useracc.js should pass jshint.');\n  });\n});","define('client/tests/pods/activate/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/activate/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/activate/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/activate/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/activate/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/activate/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/admin/language/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/admin/language/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/admin/language/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/application/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/application/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/application/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/application/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/building/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/building/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/building/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/company/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/company/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/company/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/company-card/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/company-card/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/company-card/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/company-list/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/company-list/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/company-list/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/date-picker/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/date-picker/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/date-picker/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/header-profile-box/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/header-profile-box/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/header-profile-box/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/help-box/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/help-box/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/help-box/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/info-modal/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/info-modal/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/info-modal/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/placc-calendar/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/placc-calendar/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/placc-calendar/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/profile-card/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/profile-card/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/profile-card/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/q-input/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/q-input/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/q-input/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/q-signup/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/q-signup/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/q-signup/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/components/wysiwyg-editor/component.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/components/wysiwyg-editor/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/wysiwyg-editor/component.js should pass jshint.');\n  });\n});","define('client/tests/pods/cpolicy/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/cpolicy/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/cpolicy/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/error-page/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/error-page/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/error-page/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/index/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/index/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/index/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/index/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/index/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/level/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/level/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/level/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/level/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/level/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/level/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/privacy/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/privacy/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/privacy/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/forgotpwchange/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/forgotpwchange/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/forgotpwchange/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/forgotpwchange/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/forgotpwchange/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/forgotpwchange/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/forgotpwd/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/forgotpwd/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/forgotpwd/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/forgotpwd/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/forgotpwd/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/forgotpwd/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/index/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/index/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/profile/index/controller.js should pass jshint.\\npods/profile/index/controller.js: line 10, col 73, Missing semicolon.\\npods/profile/index/controller.js: line 14, col 11, Missing semicolon.\\n\\n2 errors');\n  });\n});","define('client/tests/pods/profile/index/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/index/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/index/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/modify/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/modify/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/modify/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/modify/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/modify/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/modify/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/places/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/places/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/places/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/places/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/places/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/places/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/signup/controller.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/signup/controller.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/signup/controller.js should pass jshint.');\n  });\n});","define('client/tests/pods/profile/signup/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/profile/signup/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/profile/signup/route.js should pass jshint.');\n  });\n});","define('client/tests/pods/terms/route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | pods/terms/route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/terms/route.js should pass jshint.');\n  });\n});","define('client/tests/resolver.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('client/tests/router.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('client/tests/serializers/application.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('client/tests/serializers/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | serializers/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/session.js should pass jshint.');\n  });\n});","define('client/tests/services/appstate.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/appstate.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/appstate.js should pass jshint.');\n  });\n});","define('client/tests/services/loader.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/loader.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/loader.js should pass jshint.');\n  });\n});","define('client/tests/services/modal.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/modal.js should pass jshint.');\n  });\n});","define('client/tests/services/session.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/session.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/session.js should pass jshint.');\n  });\n});","define('client/tests/test-helper', ['exports', 'client/tests/helpers/resolver', 'ember-qunit'], function (exports, _clientTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_clientTestsHelpersResolver['default']);\n});","define('client/tests/test-helper.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('client/tests/transforms/datetime.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/datetime.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/datetime.js should pass jshint.');\n  });\n});","define('client/tests/transforms/mdate.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/mdate.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/mdate.js should pass jshint.');\n  });\n});","define('client/tests/transforms/raw.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/raw.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/raw.js should pass jshint.');\n  });\n});","define('client/tests/transforms/time.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/time.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/time.js should pass jshint.');\n  });\n});","define('client/tests/transforms/timestamp.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | transforms/timestamp.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/timestamp.js should pass jshint.');\n  });\n});","define('client/tests/unit/building/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:building', 'Unit | Route | building', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/building/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/building/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/building/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/helpers/date-format-test', ['exports', 'client/helpers/date-format', 'qunit'], function (exports, _clientHelpersDateFormat, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | date format');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _clientHelpersDateFormat.dateFormat)([42]);\n    assert.ok(result);\n  });\n});","define('client/tests/unit/helpers/date-format-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/date-format-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/date-format-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/helpers/is-today-test', ['exports', 'client/helpers/is-today', 'qunit'], function (exports, _clientHelpersIsToday, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | is today');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _clientHelpersIsToday.isToday)([42]);\n    assert.ok(result);\n  });\n});","define('client/tests/unit/helpers/is-today-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/helpers/is-today-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/is-today-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/initializers/loader-test', ['exports', 'ember', 'client/initializers/loader', 'qunit', 'client/tests/helpers/destroy-app'], function (exports, _ember, _clientInitializersLoader, _qunit, _clientTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Initializer | loader', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _clientTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _clientInitializersLoader.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('client/tests/unit/initializers/loader-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/loader-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/loader-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/initializers/session-test', ['exports', 'ember', 'client/initializers/session', 'qunit', 'client/tests/helpers/destroy-app'], function (exports, _ember, _clientInitializersSession, _qunit, _clientTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Initializer | session', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _clientTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _clientInitializersSession.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('client/tests/unit/initializers/session-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/session-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/initializers/uncountable-test', ['exports', 'ember', 'client/initializers/uncountable', 'qunit', 'client/tests/helpers/destroy-app'], function (exports, _ember, _clientInitializersUncountable, _qunit, _clientTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Initializer | uncountable', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _clientTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _clientInitializersUncountable.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('client/tests/unit/initializers/uncountable-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/initializers/uncountable-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/uncountable-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/instance-initializers/session-test', ['exports', 'ember', 'client/instance-initializers/session', 'qunit', 'client/tests/helpers/destroy-app'], function (exports, _ember, _clientInstanceInitializersSession, _qunit, _clientTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Instance Initializer | session', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.appInstance = _this.application.buildInstance();\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(this.appInstance, 'destroy');\n      (0, _clientTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _clientInstanceInitializersSession.initialize)(this.appInstance);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('client/tests/unit/instance-initializers/session-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/instance-initializers/session-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/instance-initializers/session-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/building-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('building', 'Unit | Model | building', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/building-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/building-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/building-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/level-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('level', 'Unit | Model | level', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/level-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/level-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/level-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/reservation-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('reservation', 'Unit | Model | reservation', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/reservation-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/reservation-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/reservation-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/seat-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('seat', 'Unit | Model | seat', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/seat-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/seat-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/seat-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/user-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/user-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/building/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:building', 'Unit | Route | building', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/building/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/building/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/building/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/company/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:company', 'Unit | Route | company', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/company/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/company/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/company/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/cpolicy/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:cpolicy', 'Unit | Route | cpolicy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/cpolicy/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/cpolicy/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/cpolicy/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/error-page/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:error-page', 'Unit | Route | error page', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/error-page/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/error-page/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/error-page/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/level/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:level', 'Unit | Route | level', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/level/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/level/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/level/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/levels/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:levels', 'Unit | Route | levels', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/levels/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/levels/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/levels/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/privacy/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:privacy', 'Unit | Route | privacy', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/privacy/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/privacy/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/privacy/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/pods/terms/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:terms', 'Unit | Route | terms', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/pods/terms/route-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/pods/terms/route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/terms/route-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/services/appstate-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:appstate', 'Unit | Service | appstate', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('client/tests/unit/services/appstate-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/services/appstate-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/appstate-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/transforms/datetime-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:datetime', 'Unit | Transform | datetime', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('client/tests/unit/transforms/datetime-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/datetime-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/datetime-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/transforms/mdate-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:mdate', 'Unit | Transform | mdate', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('client/tests/unit/transforms/mdate-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/mdate-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/mdate-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/transforms/raw-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:raw', 'Unit | Transform | raw', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('client/tests/unit/transforms/raw-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/raw-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/raw-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/transforms/time-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:time', 'Unit | Transform | time', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('client/tests/unit/transforms/time-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/time-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/time-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/transforms/timestamp-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('transform:timestamp', 'Unit | Transform | timestamp', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var transform = this.subject();\n    assert.ok(transform);\n  });\n});","define('client/tests/unit/transforms/timestamp-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/transforms/timestamp-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/timestamp-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/validators/no-whitespace-around-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('validator:no-whitespace-around', 'Unit | Validator | no-whitespace-around', {\n    needs: ['validator:messages']\n  });\n\n  (0, _emberQunit.test)('it works', function (assert) {\n    var validator = this.subject();\n    assert.ok(validator);\n  });\n});","define('client/tests/unit/validators/no-whitespace-around-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/validators/no-whitespace-around-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/validators/no-whitespace-around-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/validators/unique-email-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('validator:unique-email', 'Unit | Validator | unique-email', {\n    needs: ['validator:messages']\n  });\n\n  (0, _emberQunit.test)('it works', function (assert) {\n    var validator = this.subject();\n    var done = assert.async();\n    validator.validate('attila.hogyai@gmail.com').then(function (message) {\n      console.log('aaa:' + message);\n      assert.equal(message, true);\n      done();\n    });\n    assert.ok(validator);\n  });\n});","define('client/tests/unit/validators/unique-email-test.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/validators/unique-email-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/validators/unique-email-test.js should pass jshint.');\n  });\n});","define('client/tests/utils/auth-route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/auth-route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/auth-route.js should pass jshint.');\n  });\n});","define('client/tests/utils/i18n/missing-message.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/i18n/missing-message.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/i18n/missing-message.js should pass jshint.');\n  });\n});","define('client/tests/utils/q-infinity-route.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | utils/q-infinity-route.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/q-infinity-route.js should pass jshint.');\n  });\n});","define('client/tests/validators/no-whitespace-around.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | validators/no-whitespace-around.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/no-whitespace-around.js should pass jshint.');\n  });\n});","define('client/tests/validators/unique-email.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | validators/unique-email.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/unique-email.js should pass jshint.');\n  });\n});","define('client/tests/validators/unique-login.jshint.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | validators/unique-login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/unique-login.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}